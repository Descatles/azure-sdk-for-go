package translationbatch

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/satori/go.uuid"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/cognitiveservices/v1.0.preview/translation.batch"

// Code enumerates the values for code.
type Code string

const (
	// EmptyRequest ...
	EmptyRequest Code = "EmptyRequest"
	// InvalidDocument ...
	InvalidDocument Code = "InvalidDocument"
	// InvalidDocumentBatch ...
	InvalidDocumentBatch Code = "InvalidDocumentBatch"
	// InvalidParameterValue ...
	InvalidParameterValue Code = "InvalidParameterValue"
	// InvalidRequestBodyFormat ...
	InvalidRequestBodyFormat Code = "InvalidRequestBodyFormat"
	// MissingInputRecords ...
	MissingInputRecords Code = "MissingInputRecords"
	// ModelVersionIncorrect ...
	ModelVersionIncorrect Code = "ModelVersionIncorrect"
	// UnsupportedLanguageCode ...
	UnsupportedLanguageCode Code = "UnsupportedLanguageCode"
)

// PossibleCodeValues returns an array of possible values for the Code const type.
func PossibleCodeValues() []Code {
	return []Code{EmptyRequest, InvalidDocument, InvalidDocumentBatch, InvalidParameterValue, InvalidRequestBodyFormat, MissingInputRecords, ModelVersionIncorrect, UnsupportedLanguageCode}
}

// Code1 enumerates the values for code 1.
type Code1 string

const (
	// InternalServerError ...
	InternalServerError Code1 = "InternalServerError"
	// InvalidArgument ...
	InvalidArgument Code1 = "InvalidArgument"
	// InvalidRequest ...
	InvalidRequest Code1 = "InvalidRequest"
	// ServiceUnavailable ...
	ServiceUnavailable Code1 = "ServiceUnavailable"
)

// PossibleCode1Values returns an array of possible values for the Code1 const type.
func PossibleCode1Values() []Code1 {
	return []Code1{InternalServerError, InvalidArgument, InvalidRequest, ServiceUnavailable}
}

// Status enumerates the values for status.
type Status string

const (
	// Cancelled ...
	Cancelled Status = "Cancelled"
	// Failed ...
	Failed Status = "Failed"
	// NotStarted ...
	NotStarted Status = "NotStarted"
	// Running ...
	Running Status = "Running"
	// Succeeded ...
	Succeeded Status = "Succeeded"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{Cancelled, Failed, NotStarted, Running, Succeeded}
}

// Status1 enumerates the values for status 1.
type Status1 string

const (
	// Status1Cancelled ...
	Status1Cancelled Status1 = "Cancelled"
	// Status1Failed ...
	Status1Failed Status1 = "Failed"
	// Status1NotStarted ...
	Status1NotStarted Status1 = "NotStarted"
	// Status1Running ...
	Status1Running Status1 = "Running"
	// Status1Succeeded ...
	Status1Succeeded Status1 = "Succeeded"
)

// PossibleStatus1Values returns an array of possible values for the Status1 const type.
func PossibleStatus1Values() []Status1 {
	return []Status1{Status1Cancelled, Status1Failed, Status1NotStarted, Status1Running, Status1Succeeded}
}

// StorageSource enumerates the values for storage source.
type StorageSource string

const (
	// AzureBlob ...
	AzureBlob StorageSource = "AzureBlob"
)

// PossibleStorageSourceValues returns an array of possible values for the StorageSource const type.
func PossibleStorageSourceValues() []StorageSource {
	return []StorageSource{AzureBlob}
}

// StorageSource1 enumerates the values for storage source 1.
type StorageSource1 string

const (
	// StorageSource1AzureBlob ...
	StorageSource1AzureBlob StorageSource1 = "AzureBlob"
)

// PossibleStorageSource1Values returns an array of possible values for the StorageSource1 const type.
func PossibleStorageSource1Values() []StorageSource1 {
	return []StorageSource1{StorageSource1AzureBlob}
}

// BatchRequest definition for the input batch translation request
type BatchRequest struct {
	Source      *SourceInput      `json:"source,omitempty"`
	Destination *DestinationInput `json:"destination,omitempty"`
}

// DestinationInput destination for the finished translated documents
type DestinationInput struct {
	// Path - Location of the folder / container with your documents
	Path *string `json:"path,omitempty"`
	// StorageSource - Possible values include: 'StorageSource1AzureBlob'
	StorageSource StorageSource1 `json:"storageSource,omitempty"`
}

// DocumentFilter ...
type DocumentFilter struct {
	// Prefix - A case-sensitive prefix string to filter documents in the source path for translation.
	// For example, when using a Azure storage blob Uri, use the prefix to restrict sub folders for translation.
	Prefix *string `json:"prefix,omitempty"`
	// Suffix - A case-sensitive suffix string to filter documents in the source path for translation.
	// This is most often use for file extensions
	Suffix *string `json:"suffix,omitempty"`
	// IncludeSubFolder - A flag to indicate if sub folders within the set of prefix folders will also need to be included when searching for content to be translated.
	IncludeSubFolder *bool `json:"includeSubFolder,omitempty"`
}

// DocumentFormat ...
type DocumentFormat struct {
	// Format - Name of the format
	Format *string `json:"format,omitempty"`
	// FileExtensions - Supported file extension for this format
	FileExtensions *[]string `json:"fileExtensions,omitempty"`
	// ContentTypes - Supported Content-Types for this format
	ContentTypes *[]string `json:"contentTypes,omitempty"`
}

// DocumentStatusDetail ...
type DocumentStatusDetail struct {
	// Path - Location of the document or folder
	Path *string `json:"path,omitempty"`
	// CreatedDateTimeUtc - Operation created date time
	CreatedDateTimeUtc *date.Time `json:"createdDateTimeUtc,omitempty"`
	// LastActionDateTimeUtc - Date time in which the operation's status has been updated
	LastActionDateTimeUtc *date.Time `json:"lastActionDateTimeUtc,omitempty"`
	// Status - Possible values include: 'NotStarted', 'Running', 'Succeeded', 'Failed', 'Cancelled'
	Status Status `json:"status,omitempty"`
	// DetectedLanguage - Detected language of the original document (to be implemented)
	DetectedLanguage *string `json:"detectedLanguage,omitempty"`
	// To - To language
	To *string `json:"to,omitempty"`
	// ErrorMessage - Error message if any
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// ErrorCode - Error code if any
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// Progress - Progress of the translation if available
	Progress *float64 `json:"progress,omitempty"`
	// ID - Document Id
	ID *int64 `json:"id,omitempty"`
}

// DocumentStatusResponse document Status Response
type DocumentStatusResponse struct {
	// Documents - The detail status of individual documents
	Documents *[]DocumentStatusDetail `json:"documents,omitempty"`
	// NextLink - Url for the next page.  Null if no more pages available
	NextLink *string `json:"@nextLink,omitempty"`
}

// DocumentSubmissionResponse the response for a document submission
type DocumentSubmissionResponse struct {
	Job *OperationStatusResponse `json:"job,omitempty"`
	// DocumentDownloadURL - Document download link
	DocumentDownloadURL *string `json:"documentDownloadUrl,omitempty"`
	// DocumentExpirationDateTimeUtc - Datetime in Utc when the document will no longer be available
	DocumentExpirationDateTimeUtc *date.Time `json:"documentExpirationDateTimeUtc,omitempty"`
}

// ErrorResponseV2 contains unified error information used for HTTP responses across any Cognitive Service.
// Instances
// can be created either through Microsoft.CloudAI.Containers.HttpStatusExceptionV2 or by returning it
// directly from
// a controller.
type ErrorResponseV2 struct {
	Error *ErrorV2 `json:"error,omitempty"`
}

// ErrorV2 this contains an outer error with error code, message, details, target and an inner error with
// more descriptive details.
type ErrorV2 struct {
	// Code - Possible values include: 'InvalidRequest', 'InvalidArgument', 'InternalServerError', 'ServiceUnavailable'
	Code Code1 `json:"code,omitempty"`
	// Details - READ-ONLY; Gets additional supportive details regarding the error and/or expected policies.
	Details *[]ErrorV2 `json:"details,omitempty"`
	// Message - READ-ONLY; Gets high level error message.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; Gets the source of the error.
	// For example it would be "documents" or "document id" in case of invalid document.
	Target     *string       `json:"target,omitempty"`
	InnerError *InnerErrorV2 `json:"innerError,omitempty"`
}

// InnerErrorV2 new Inner Error format which conforms to Cognitive Services API Guidelines which is
// available at
// https://microsoft.sharepoint.com/%3Aw%3A/t/CognitiveServicesPMO/EUoytcrjuJdKpeOKIK_QRC8BPtUYQpKBi8JsWyeDMRsWlQ?e=CPq8ow.
// This contains required properties ErrorCode, message and optional properties target, details(key value
// pair), inner error(this can be nested).
type InnerErrorV2 struct {
	// Code - Possible values include: 'InvalidParameterValue', 'InvalidRequestBodyFormat', 'EmptyRequest', 'MissingInputRecords', 'InvalidDocument', 'ModelVersionIncorrect', 'InvalidDocumentBatch', 'UnsupportedLanguageCode'
	Code Code `json:"code,omitempty"`
	// Details - READ-ONLY; Gets additional supportive details regarding the error and/or expected policies.
	Details map[string]*string `json:"details"`
	// Message - READ-ONLY; Gets high level error message.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; Gets the source of the error.
	// For example it would be "documents" or "document id" in case of invalid document.
	Target     *string       `json:"target,omitempty"`
	InnerError *InnerErrorV2 `json:"innerError,omitempty"`
}

// MarshalJSON is the custom marshaler for InnerErrorV2.
func (iev InnerErrorV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if iev.Code != "" {
		objectMap["code"] = iev.Code
	}
	if iev.InnerError != nil {
		objectMap["innerError"] = iev.InnerError
	}
	return json.Marshal(objectMap)
}

// JobSubmissionBatchRequest job submission batch request
type JobSubmissionBatchRequest struct {
	// To - The list of language codes for the documents to translate to
	To *[]string `json:"to,omitempty"`
	// Inputs - The input list of documents or folders containing documents
	Inputs *[]BatchRequest `json:"inputs,omitempty"`
	// From - The language code of the original document
	// If none is specified, we will perform auto detect on the document (TBD)
	From *string `json:"from,omitempty"`
	// Category - Category for the translation system (Optional)
	Category *string `json:"category,omitempty"`
}

// OperationStatusResponse job status response
type OperationStatusResponse struct {
	// ID - Id of the operation.
	ID *uuid.UUID `json:"id,omitempty"`
	// CreatedDateTimeUtc - Operation created date time
	CreatedDateTimeUtc *date.Time `json:"createdDateTimeUtc,omitempty"`
	// LastActionDateTimeUtc - Date time in which the operation's status has been updated
	LastActionDateTimeUtc *date.Time `json:"lastActionDateTimeUtc,omitempty"`
	// Status - Possible values include: 'Status1NotStarted', 'Status1Running', 'Status1Succeeded', 'Status1Failed', 'Status1Cancelled'
	Status  Status1        `json:"status,omitempty"`
	Summary *StatusSummary `json:"summary,omitempty"`
	// DocumentStatusDetails - The detail status of individual documents
	DocumentStatusDetails *[]DocumentStatusDetail `json:"documentStatusDetails,omitempty"`
}

// SetListDocumentFormat ...
type SetListDocumentFormat struct {
	autorest.Response `json:"-"`
	Value             map[string][]DocumentFormat `json:"value"`
}

// MarshalJSON is the custom marshaler for SetListDocumentFormat.
func (sldf SetListDocumentFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if sldf.Value != nil {
		objectMap["value"] = sldf.Value
	}
	return json.Marshal(objectMap)
}

// SetListString ...
type SetListString struct {
	autorest.Response `json:"-"`
	Value             map[string][]string `json:"value"`
}

// MarshalJSON is the custom marshaler for SetListString.
func (sls SetListString) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if sls.Value != nil {
		objectMap["value"] = sls.Value
	}
	return json.Marshal(objectMap)
}

// SetObject ...
type SetObject struct {
	autorest.Response `json:"-"`
	Value             interface{} `json:"value,omitempty"`
}

// SourceInput source of the input documents
type SourceInput struct {
	Filter *DocumentFilter `json:"filter,omitempty"`
	// Path - Location of the folder / container with your documents
	Path *string `json:"path,omitempty"`
	// StorageSource - Possible values include: 'AzureBlob'
	StorageSource StorageSource `json:"storageSource,omitempty"`
}

// StatusSummary ...
type StatusSummary struct {
	// TotalDocuments - Total document count
	TotalDocuments *int32 `json:"totalDocuments,omitempty"`
	// FailedDocuments - Number of documents that has failed
	FailedDocuments *int32 `json:"failedDocuments,omitempty"`
	// SucceedDocuments - Number of documents that have succeeded
	SucceedDocuments *int32 `json:"succeedDocuments,omitempty"`
	// InProgressDocuments - Number of documents that are in progress
	InProgressDocuments *int32 `json:"inProgressDocuments,omitempty"`
	// NotYetStartedDocuments - Number of documents that has not yet been processed
	NotYetStartedDocuments *int32 `json:"notYetStartedDocuments,omitempty"`
}
